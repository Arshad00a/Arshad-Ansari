{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of Python Assignment 1.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyM+igRZVtdc0I9v8tTwm8SF",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Arshad00a/Python-Assignment/blob/master/Python%20Assignement%201\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kid7Z4gGmaLG",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 306
        },
        "outputId": "eb3ebd79-51fb-4fc1-e148-88465efa3e8f"
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "\n",
        "url = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vTPqLOTtWjWnbPtQdTUq-CrGRnxiWRJ-Pfz2VAt8hxzPzS9E_plqoY6RbGXk8upHa2N6CM9RHkuq0N7/pub?output=xlsx'\n",
        "\n",
        "df1 = pd.read_excel(url)\n",
        "\n",
        "print(df1)\n",
        "\n",
        "print(df1.columns)\n",
        "\n",
        "# Overall Average tip\n",
        "# Average is nothing but mean\n",
        "print(\"priting overall Average(mean) of column tip\")\n",
        "df1['tip'].mean()"
      ],
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "     total_bill   tip     sex smoker   day    time  size\n",
            "0         16.99  1.01  Female     No   Sun  Dinner     2\n",
            "1         10.34  1.66    Male     No   Sun  Dinner     3\n",
            "2         21.01  3.50    Male     No   Sun  Dinner     3\n",
            "3         23.68  3.31    Male     No   Sun  Dinner     2\n",
            "4         24.59  3.61  Female     No   Sun  Dinner     4\n",
            "..          ...   ...     ...    ...   ...     ...   ...\n",
            "239       29.03  5.92    Male     No   Sat  Dinner     3\n",
            "240       27.18  2.00  Female    Yes   Sat  Dinner     2\n",
            "241       22.67  2.00    Male    Yes   Sat  Dinner     2\n",
            "242       17.82  1.75    Male     No   Sat  Dinner     2\n",
            "243       18.78  3.00  Female     No  Thur  Dinner     2\n",
            "\n",
            "[244 rows x 7 columns]\n",
            "Index(['total_bill', 'tip', 'sex', 'smoker', 'day', 'time', 'size'], dtype='object')\n",
            "priting overall Average(mean) of column tip\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2.9982786885245902"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bgagXrFlmlil",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 102
        },
        "outputId": "3fe13dce-a385-49ca-c52b-e50f542eafa3"
      },
      "source": [
        "#Get a numberical value for tip  are the mean (Average) and median (Middle value) very different ? what does this field tell you about\n",
        "\n",
        "tip_mean=df1['tip'].mean()\n",
        "tip_median = df1['tip'].median()\n",
        "\n",
        "print(\"printing out mean of column tip : \" ,tip_mean)\n",
        "print(\"printing out median of column tip : \",tip_median)\n",
        "\n",
        "print(\"From the above Observation we know that the mean(Average) and median(middle value) is same for column tip\")\n",
        "print(\"from mean - we get to know that the Average tip a waiter or the person is getting\")\n",
        "print(\"from median - we get to know the middle value \")"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "printing out mean of column tip :  2.9982786885245902\n",
            "printing out median of column tip :  2.9\n",
            "From the above Observation we know that the mean(Average) and median(middle value) is same for column tip\n",
            "from mean - we get to know that the Average tip a waiter or the person is getting\n",
            "from median - we get to know the middle value \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xF4C-FaBn2yr",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        },
        "outputId": "0b839168-d4c0-435b-a608-4598d0556e7a"
      },
      "source": [
        "#   Box Plot for  Total Bill\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "plt.boxplot(df1['total_bill'])\n",
        "plt.title(\"Box Plot for Total Bill \")\n",
        "plt.ylabel(\"price in $\")\n",
        "plt.show()\n",
        "# Are there any Outliers \n",
        "print(\"Are there any Outliers : Yes there are outliers\")"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Are there any Outliers : Yes there are outliers\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UwmrqvE-r4HF",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "920c1245-93eb-4900-dfe8-1a31f9b8d938"
      },
      "source": [
        "# what is the percentage of females in data\n",
        "df1['sex'].value_counts(normalize=True) * 100\n",
        "print(\"There are 35.665 % females in data\")\n",
        "\n",
        "\n",
        "#If True then the object returned will contain the relative frequencies of the unique values."
      ],
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "There are 35.665 % females in data\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iFdfNkBPuAAl",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yC4jjX-tswTq",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 102
        },
        "outputId": "6cb081ea-a258-44f6-d957-972bc232ef8a"
      },
      "source": [
        "# Does the Average tip Differ by Gender \n",
        "\n",
        "print(df1.groupby('sex')['tip'].mean())\n",
        "print(\"Yes, The Average tip differ by genderr\")"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "sex\n",
            "Female    2.833448\n",
            "Male      3.089618\n",
            "Name: tip, dtype: float64\n",
            "Yes, The Average tip differ by genderr\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "c2e6PMsA2w77",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 102
        },
        "outputId": "65af3fa2-c4c6-41ee-a807-5ae6dfd8b962"
      },
      "source": [
        "# Does the Aveargae tip differ by time\n",
        "print(df1.groupby('time')['tip'].mean())\n",
        "print(\"Yes, the Average tip differ by Time \")"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "time\n",
            "Dinner    3.102670\n",
            "Lunch     2.728088\n",
            "Name: tip, dtype: float64\n",
            "Yes, the Average tip differ by Time \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PcJmMggL3FW8",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "outputId": "2098334e-2743-4aec-ba9d-c3e4134abb03"
      },
      "source": [
        "# Does the Aveerge tip differ by size (number of people)\n",
        "print(df1.groupby('size')['tip'].mean())\n",
        "print(\"Yes the Average tip differ by Size \")\n",
        "\n"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "size\n",
            "1    1.437500\n",
            "2    2.582308\n",
            "3    3.393158\n",
            "4    4.135405\n",
            "5    4.028000\n",
            "6    5.225000\n",
            "Name: tip, dtype: float64\n",
            "Yes the Average tip differ by Size \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pIlGk8JZt73A",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 389
        },
        "outputId": "c8b45202-4221-49a3-e992-4533c8e183f5"
      },
      "source": [
        "#prepare a bar plot with bar representing the percentage of records for each gender\n",
        "\n",
        "M_F=df1['sex'].value_counts()\n",
        "print(M_F)\n",
        "df1['sex'].value_counts().plot(kind=\"bar\")\n",
        "plt.title(\"Number of male and female in resturant\")\n",
        "plt.xlabel(\"Gender\")"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Male      157\n",
            "Female     87\n",
            "Name: sex, dtype: int64\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 0, 'Gender')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 33
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "llqGZ6ukrDv6",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        },
        "outputId": "71aaaa53-35ca-4e7a-ee33-c3d25e3b998f"
      },
      "source": [
        "Tips_based_on_Time=df1.groupby('time')['tip'].sum()\n",
        "print(Tips_based_on_Time)\n",
        "print(\"\\n   Yes, people pay more tips during Dinner time as compared to lunch\")"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "time\n",
            "Dinner    546.07\n",
            "Lunch     185.51\n",
            "Name: tip, dtype: float64\n",
            "\n",
            "   Yes, people pay more tips during Dinner time as compared to lunch\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3bo8HcKAyiKe",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 187
        },
        "outputId": "fa9e845b-d335-435f-baf9-2c524bee09e2"
      },
      "source": [
        "Tips_Based_on_Size=df1.groupby('size')['tip'].sum()\n",
        "print(Tips_Based_on_Size)\n",
        "print(\"\\n Yes, Tips differ by size \")"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "size\n",
            "1      5.75\n",
            "2    402.84\n",
            "3    128.94\n",
            "4    153.01\n",
            "5     20.14\n",
            "6     20.90\n",
            "Name: tip, dtype: float64\n",
            "\n",
            " Yes, Tips differ by size \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_uHqcmHPzHw-",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        },
        "outputId": "3a441072-da0f-4755-80ba-f553e449d974"
      },
      "source": [
        "Tips_Smokers=df1.groupby('smoker')['tip'].sum()\n",
        "print(Tips_Smokers)\n",
        "print(\"\\n Yes, Non Smoker pays more tips than smoker\")"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "smoker\n",
            "No     451.77\n",
            "Yes    279.81\n",
            "Name: tip, dtype: float64\n",
            "\n",
            " Yes, Non Smoker pays more tips than smoker\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ad6mly0_zvmz",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 352
        },
        "outputId": "2d6cfe92-4916-4476-d621-46a6d13eecab"
      },
      "source": [
        "# Gender VS Smoker/NonSmoker and tip size\n",
        "df1.groupby(['smoker','sex'])['tip'].sum().plot(kind=\"bar\")"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f6721b3f5c0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 37
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dCwbWAO-1Hhv",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        },
        "outputId": "04f43ba6-79f0-4287-b973-f180baff8b9a"
      },
      "source": [
        "df1['pct_tip']=(df1['tip']/df1['total_bill'])*100\n",
        "df1['pct_tip']"
      ],
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0       5.944673\n",
              "1      16.054159\n",
              "2      16.658734\n",
              "3      13.978041\n",
              "4      14.680765\n",
              "         ...    \n",
              "239    20.392697\n",
              "240     7.358352\n",
              "241     8.822232\n",
              "242     9.820426\n",
              "243    15.974441\n",
              "Name: pct_tip, Length: 244, dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_9XrZpP6BJvg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "J6dyyWkt-ZeN",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        },
        "outputId": "f1fc64c6-e1f7-4864-82e8-e343a49c5101"
      },
      "source": [
        "pct_tip_gender=df1.groupby('sex')['pct_tip'].sum()\n",
        "print(pct_tip_gender)\n",
        "print(\" \\n Yes pct_tip differ by gender\")\n"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "sex\n",
            "Female    1448.469406\n",
            "Male      2475.113588\n",
            "Name: pct_tip, dtype: float64\n",
            " \n",
            " Yes pct_tip differ by gender\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DhEvK7id_2p8",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 187
        },
        "outputId": "f3a6bea3-b80a-4bfe-d45e-79f3d198ff76"
      },
      "source": [
        "pct_tip_size=df1.groupby('size')['pct_tip'].sum()\n",
        "print(pct_tip_size)\n",
        "print(\"\\n yes, pct_tip differs by Size\")"
      ],
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "size\n",
            "1      86.916806\n",
            "2    2585.219391\n",
            "3     578.196048\n",
            "4     540.011324\n",
            "5      70.747745\n",
            "6      62.491680\n",
            "Name: pct_tip, dtype: float64\n",
            "\n",
            " yes, pct_tip differs by Size\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JkB49t-0BH53",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 386
        },
        "outputId": "864d5c28-bc48-41d3-9c3c-463615e9d6a8"
      },
      "source": [
        "df1.groupby(['sex','smoker'])['pct_tip'].sum().plot(kind=\"bar\")\n",
        "print(\"\\n \\n No, Pct-tip is just a percentage of tip it is same as that of tip but only in percentage, My inference does not change\")\n"
      ],
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            " \n",
            " No, Pct-tip is just a percentage of tip it is same as that of tip but only in percentage, My inference does not change\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAX0AAAE+CAYAAABhtcCTAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAdpUlEQVR4nO3de5hcdZ3n8fcHAjh44WJaFpJgIhNwkRHBFnFwFEUhiEuYeURhGImKk3EEdbysxBkdRh33wfWC4iBrHAJBWZBVR6KAgICiu4JJUO4ivYCSGE0riK6IEPnsH+fXULSdS11SJ1Xn83qefvrU75yq+nY91Z8651vnIttEREQzbFV3ARER0T8J/YiIBknoR0Q0SEI/IqJBEvoREQ0yre4CNmT69OmePXt23WVERAyUlStX/sL2yFTztujQnz17NitWrKi7jIiIgSLpx+ubt9H2jqQlktZKunnS+Fsk/VDSLZL+e8v4eySNSbpd0mEt4/PK2JikRZ3+MRER0blNWdM/B/g34NyJAUkvAeYD+9r+vaSnlfG9gWOAZwG7Ad+QtGe52xnAy4FVwHJJy2zf2qs/JCIiNm6joW/7GkmzJw3/PXCq7d+XZdaW8fnABWX8LkljwAFl3pjtOwEkXVCWTehHRPRRp3vv7An8haTrJH1L0vPK+AzgnpblVpWx9Y3/EUkLJa2QtGJ8fLzD8iIiYiqdhv40YGfgQOC/AhdKUi8Ksr3Y9qjt0ZGRKb98joiIDnW6984q4Muuztb2PUmPANOB1cCsluVmljE2MB4REX3S6Zr+V4CXAJQvarcFfgEsA46RtJ2kOcBc4HvAcmCupDmStqX6sndZt8VHRER7NrqmL+l84GBguqRVwCnAEmBJ2Y3zIWBBWeu/RdKFVF/QrgNOtP2H8jgnAZcBWwNLbN+yGf6eiIjYAG3J59MfHR11Ds6KiGiPpJW2R6eat0UfkRvRNLMXXVx3CZvk7lOPqLuE6FBOuBYR0SAJ/YiIBknoR0Q0SEI/IqJBEvoREQ2S0I+IaJCEfkREgyT0IyIaJKEfEdEgCf2IiAZJ6EdENEhCPyKiQRL6ERENktCPiGiQhH5ERIMk9CMiGiShHxHRIBsNfUlLJK0t18OdPO+dkixperktSadLGpN0o6T9W5ZdIOmO8rOgt39GRERsik1Z0z8HmDd5UNIs4FDgJy3DhwNzy89C4Myy7M5UF1R/PnAAcIqknbopPCIi2rfR0Ld9DXDvFLNOA94NtF5ZfT5wrivXAjtK2hU4DLjC9r227wOuYIoPkoiI2Lw66ulLmg+stn3DpFkzgHtabq8qY+sbn+qxF0paIWnF+Ph4J+VFRMR6tB36krYH/hH4596XA7YX2x61PToyMrI5niIiorE6WdPfA5gD3CDpbmAmcL2k/wSsBma1LDuzjK1vPCIi+qjt0Ld9k+2n2Z5tezZVq2Z/2z8DlgHHl714DgTut70GuAw4VNJO5QvcQ8tYRET00abssnk+8F1gL0mrJJ2wgcUvAe4ExoDPAm8GsH0v8EFgefn5QBmLiIg+mraxBWwfu5H5s1umDZy4nuWWAEvarC8iInooR+RGRDRIQj8iokES+hERDZLQj4hokIR+RESDJPQjIhokoR8R0SAJ/YiIBknoR0Q0SEI/IqJBEvoREQ2S0I+IaJCEfkREgyT0IyIaJKEfEdEgCf2IiAZJ6EdENMimXC5xiaS1km5uGfuIpB9KulHSf0jasWXeeySNSbpd0mEt4/PK2JikRb3/UyIiYmM2ZU3/HGDepLErgH1sPxv4EfAeAEl7A8cAzyr3+bSkrSVtDZwBHA7sDRxblo2IiD7aaOjbvga4d9LY5bbXlZvXAjPL9HzgAtu/t30X1QXSDyg/Y7bvtP0QcEFZNiIi+qgXPf03AJeW6RnAPS3zVpWx9Y3/EUkLJa2QtGJ8fLwH5UVExISuQl/SPwHrgPN6Uw7YXmx71PboyMhIrx42IiKAaZ3eUdLrgFcCh9h2GV4NzGpZbGYZYwPjERHRJx2t6UuaB7wbONL2Ay2zlgHHSNpO0hxgLvA9YDkwV9IcSdtSfdm7rLvSIyKiXRtd05d0PnAwMF3SKuAUqr11tgOukARwre032b5F0oXArVRtnxNt/6E8zknAZcDWwBLbt2yGvyciIjZgo6Fv+9gphs/awPIfAj40xfglwCVtVRcRET2VI3IjIhokoR8R0SAJ/YiIBknoR0Q0SEI/IqJBEvoREQ2S0I+IaJCEfkREgyT0IyIaJKEfEdEgCf2IiAZJ6EdENEhCPyKiQRL6ERENktCPiGiQhH5ERIMk9CMiGiShHxHRIBsNfUlLJK2VdHPL2M6SrpB0R/m9UxmXpNMljUm6UdL+LfdZUJa/Q9KCzfPnRETEhmzKmv45wLxJY4uAK23PBa4stwEOB+aWn4XAmVB9SFBdUP35wAHAKRMfFBER0T8bDX3b1wD3ThqeDywt00uBo1rGz3XlWmBHSbsChwFX2L7X9n3AFfzxB0lERGxmnfb0d7G9pkz/DNilTM8A7mlZblUZW9/4H5G0UNIKSSvGx8c7LC8iIqbS9Re5tg24B7VMPN5i26O2R0dGRnr1sBERQeeh//PStqH8XlvGVwOzWpabWcbWNx4REX3UaegvAyb2wFkAXNQyfnzZi+dA4P7SBroMOFTSTuUL3EPLWERE9NG0jS0g6XzgYGC6pFVUe+GcClwo6QTgx8Cry+KXAK8AxoAHgNcD2L5X0geB5WW5D9ie/OVwRERsZhsNfdvHrmfWIVMsa+DE9TzOEmBJW9VFRERP5YjciIgGSehHRDRIQj8iokES+hERDZLQj4hokI3uvRMRMYhmL7q47hI2yd2nHtHX58uafkREgyT0IyIaJKEfEdEgCf2IiAZJ6EdENEhCPyKiQRL6ERENktCPiGiQxh2clQM2IqLJsqYfEdEgCf2IiAbpKvQlvV3SLZJulnS+pCdImiPpOkljkr4gaduy7Hbl9liZP7sXf0BERGy6jkNf0gzgrcCo7X2ArYFjgA8Dp9n+U+A+4IRylxOA+8r4aWW5iIjoo27bO9OAP5E0DdgeWAO8FPhimb8UOKpMzy+3KfMPkaQunz8iItrQcejbXg18FPgJVdjfD6wEfmV7XVlsFTCjTM8A7in3XVeWf+rkx5W0UNIKSSvGx8c7LS8iIqbQTXtnJ6q19znAbsATgXndFmR7se1R26MjIyPdPlxERLTopr3zMuAu2+O2Hwa+DBwE7FjaPQAzgdVlejUwC6DM3wH4ZRfPHxERbeom9H8CHChp+9KbPwS4FbgaeFVZZgFwUZleVm5T5l9l2108f0REtKmbnv51VF/IXg/cVB5rMXAy8A5JY1Q9+7PKXc4CnlrG3wEs6qLuiIjoQFenYbB9CnDKpOE7gQOmWPZB4Ohuni8iIrqTI3IjIhokoR8R0SAJ/YiIBknoR0Q0SEI/IqJBEvoREQ2S0I+IaJCEfkREgyT0IyIaJKEfEdEgCf2IiAZJ6EdENEhCPyKiQRL6ERENktCPiGiQhH5ERIMk9CMiGiShHxHRIF2FvqQdJX1R0g8l3SbpBZJ2lnSFpDvK753KspJ0uqQxSTdK2r83f0JERGyqbtf0Pwl83fYzgX2B26gueH6l7bnAlTx2AfTDgbnlZyFwZpfPHRERbeo49CXtALwIOAvA9kO2fwXMB5aWxZYCR5Xp+cC5rlwL7Chp144rj4iItk3r4r5zgHHgbEn7AiuBtwG72F5TlvkZsEuZngHc03L/VWVsTcsYkhZSbQmw++67d1Fe9MPsRRfXXcImufvUI+ouIWKL0E17ZxqwP3Cm7f2A3/JYKwcA2wbczoPaXmx71PboyMhIF+VFRMRk3YT+KmCV7evK7S9SfQj8fKJtU36vLfNXA7Na7j+zjEVERJ90HPq2fwbcI2mvMnQIcCuwDFhQxhYAF5XpZcDxZS+eA4H7W9pAERHRB9309AHeApwnaVvgTuD1VB8kF0o6Afgx8Oqy7CXAK4Ax4IGybERE9FFXoW/7B8DoFLMOmWJZAyd283wREdGdHJEbEdEgCf2IiAZJ6EdENEhCPyKiQRL6ERENktCPiGiQhH5ERIMk9CMiGiShHxHRIAn9iIgGSehHRDRIQj8iokES+hERDZLQj4hokIR+RESDJPQjIhokoR8R0SBdh76krSV9X9LXyu05kq6TNCbpC+VSikjartweK/Nnd/vcERHRnl6s6b8NuK3l9oeB02z/KXAfcEIZPwG4r4yfVpaLiIg+6ir0Jc0EjgD+vdwW8FLgi2WRpcBRZXp+uU2Zf0hZPiIi+qTbNf1PAO8GHim3nwr8yva6cnsVMKNMzwDuASjz7y/LR0REn3Qc+pJeCay1vbKH9SBpoaQVklaMj4/38qEjIhqvmzX9g4AjJd0NXEDV1vkksKOkaWWZmcDqMr0amAVQ5u8A/HLyg9pebHvU9ujIyEgX5UVExGQdh77t99ieaXs2cAxwle3jgKuBV5XFFgAXlell5TZl/lW23enzR0RE+zbHfvonA++QNEbVsz+rjJ8FPLWMvwNYtBmeOyIiNmDaxhfZONvfBL5Zpu8EDphimQeBo3vxfBER0ZkckRsR0SAJ/YiIBknoR0Q0SEI/IqJBEvoREQ2S0I+IaJCEfkREgyT0IyIaJKEfEdEgCf2IiAZJ6EdENEhCPyKiQRL6ERENktCPiGiQhH5ERIMk9CMiGiShHxHRIAn9iIgG6Tj0Jc2SdLWkWyXdIultZXxnSVdIuqP83qmMS9LpksYk3Shp/179ERERsWm6WdNfB7zT9t7AgcCJkvamuuD5lbbnAlfy2AXQDwfmlp+FwJldPHdERHSg49C3vcb29WX6N8BtwAxgPrC0LLYUOKpMzwfOdeVaYEdJu3ZceUREtK0nPX1Js4H9gOuAXWyvKbN+BuxSpmcA97TcbVUZm/xYCyWtkLRifHy8F+VFRETRdehLehLwJeAfbP+6dZ5tA27n8Wwvtj1qe3RkZKTb8iIiokVXoS9pG6rAP8/2l8vwzyfaNuX32jK+GpjVcveZZSwiIvqkm713BJwF3Gb74y2zlgELyvQC4KKW8ePLXjwHAve3tIEiIqIPpnVx34OA1wI3SfpBGftH4FTgQkknAD8GXl3mXQK8AhgDHgBe38VzR0REBzoOfdvfAbSe2YdMsbyBEzt9voiI6F6OyI2IaJCEfkREgyT0IyIaJKEfEdEgCf2IiAZJ6EdENEhCPyKiQRL6ERENktCPiGiQhH5ERIMk9CMiGiShHxHRIAn9iIgGSehHRDRIQj8iokES+hERDZLQj4hokIR+RESD9D30Jc2TdLukMUmL+v38ERFN1tfQl7Q1cAZwOLA3cKykvftZQ0REk/V7Tf8AYMz2nbYfAi4A5ve5hoiIxpLt/j2Z9Cpgnu03ltuvBZ5v+6SWZRYCC8vNvYDb+1Zg56YDv6i7iCGS17O38nr2zqC8lk+3PTLVjGn9rmRjbC8GFtddRzskrbA9WncdwyKvZ2/l9eydYXgt+93eWQ3Mark9s4xFREQf9Dv0lwNzJc2RtC1wDLCszzVERDRWX9s7ttdJOgm4DNgaWGL7ln7WsJkMVDtqAOT17K28nr0z8K9lX7/IjYiIeuWI3IiIBknoR0Q0SEI/IqJBtrj99AeBpJlUex79BbAb8DvgZuBi4FLbj9RY3kCStBWwLy2vp+219VY1mCQ9DTiIx783V+R92T5JLwD+hup/fVce/7/+edv311heR/JFbpsknQ3MAL4GrADWAk8A9gReAjwXWGT7mtqKHCCS9gBOBl4G3AGM89jr+QDwGWBpAmvjJL0EWATsDHyfx7839wC+CHzM9q9rK3KASLoU+ClwEVP/r/8X4OO2B2q384R+myTtY/vmDczfFtjd9lgfyxpYks4HzgS+7UlvxrLG+tfAfbaX1lHfIJH0EeBTtn8yxbxpwCuBrW1/qe/FDSBJ021v8JQLm7LMliah34US8HuWm7fbfrjOeiKi9yQ9Efid7Uck7Qk8k6qNO5D/7/kit0OSDqZqR5wBfBr4kaQX1VrUAJN0tKQnl+n3SfqypP3rrmsQSdpB0mmSVkpaIeljknaou64Bdg3wBEkzgMuB1wLn1FpRFxL6nfsYcKjtF9t+EXAYcFrNNQ2y99n+jaQXAocAZ1G1faJ9S4BfA0cDry7TZ9da0WCT7QeAvwI+bfto4Fk119SxhH7ntrH96Gmfbf8I2KbGegbdH8rvI4DFti8Gtq2xnkG2h+1TynUr7rT9fuAZdRc1wFT24jmOaq8dqE4jM5AS+p1bIenfJR1cfj5L9Q1/dGa1pM8ArwEukbQdeX926ndliwkASQdR7WoYnfkH4D3Af9i+RdIzgKtrrqlj+SK3QyWUTgQm/rm+TbXp9/v6qhpckrYH5gE32b5D0q7An9m+vObSBo6k5wBLgR0AAfcCr7N9Q62FDThJ25c2z0BL6McWo6ydzrV9tqQR4Em276q7rkEl6SkA2S+/O6W1cxbV+3F3SfsCf2f7zTWX1pGEfpskXQ2s70Wz7UP6Wc+wkHQKMArsZXtPSbsB/8v2QTWXNjAkHb+h+bbP7Vctw0TSdcCrgGW29ytjN9vep97KOpPTMLTvXVOMHQi8m+qIvejMXwL7AdcD2P7pxC6cscmet57xI6mOIk/od8j2PZJah/6wvmW3dAn9NtleOTEt6cXA+6gOzX6T7UtrK2zwPWTbkgyPHhATbbD9lolpVQl1HNUpLq4FPlRXXUPgHkl/DljSNsDbgNtqrqlj2TuiA5IOk/RtqsD/kO0XJvA7M9F3Bi4se+/sKOlvgW8An62vssEkaZqkN1KF0suAV9l+je0bay5t4Eg6s7w/30S108YMqmt6P6fcHkhZ02+TpOXACPAR4Ltl7NEjR21fX1Npg+r7kv7J9kclvZzqQKK9gH+2fUXNtQ0USSdSrYVeCcyzfXe9FQ28O4GVwCm2j6u7mF7JF7ltkvRNHvsi11S7xE2w7Zf2vagBJunpwCeAJwFvtn1HzSUNLEmPUH2vNM7jdzYQ1Xvz2bUUNsDKqRc+DjwV+B/Ao2d7tf3luurqRkI/tgiSDqc6n8lyHv+PdWRdNQ2a8gG6XrZ/3K9ahknZK+pDwFU89t607TfUV1Xn0t6J2knai2qvqG9TncAu587vQEK9tyQ9i+r8Tz8FDrC9puaSeiJr+lErSacC84G32/563fVETJB0G/C2YTsqPGv6Ubd1wH62H6y7kIhJnjOMp1XJmn6PlHPF3DuMb5KIGB7ZT793Pgf8UNJH6y4kopWkpWWf84E8bUD0Vtb0e6gcBbm37VvqriVigqTnAbtTfRl5ct31RL0S+l2YdFbI6cCTc1bI3ki7rHvDcirgLY2kpcADwBm2b667nnalvdOhclbIk6kurgDVVZ4+X19FQyftsg5J+nNJtwI/LLf3lfTpmssaJv9GdZqQ19ZdSCeypt8hST+gnBWy5XSrN+aox95Ju6wzw3Yq4C3FsGw5ZU2/cw+5+sTMWSF7RNILJb2+TE8HZifwO2P7nklDA3sq4LoN25ZTQr9zOStkD6Vd1lOPOxWwpHcxwKcC3gKcBhwG/BKgXHbyRbVW1IUcnNWhnBWy53IRld55E/BJHjsV8OUM8KmAtwS5iEoAUEI+Qd8buYhKj9j+BdUFVKI3huoiKgn9Nkn6DVNfI3fi9LVPmWJebNzkdtkbSLusLZI+xfqv34ztt/axnGEyVFtO2XsnthilXXYo1QfoZWmXtUfSgg3Nt720X7XEliuh3yVJT6O6Ri4Atn9SYzkR0SPDuuWU9k6HJB0JfAzYjepqRU+n6vM9q866Bk3aZb0naYRqT6i9efwKSa7q1p4VdRewOST0O/dB4EDgG7b3k/QS4G9qrmng2M4eOr13HvAF4AiqfvQCqksoRhuGtR2W9k6HJK2wPSrpBqrzwT8i6Qbb+9Zd2yBLu6x7klbafm7rEeKSltt+Xt21DaJh23LKwVmd+5WkJwHXAOdJ+iTw25prGliSjpR0B3AX8C3gbuDSWosaXA+X32skHSFpP2DnOgsacOdRtW7nAO+nem8ur7OgbmRNv0NlP/IHqXrPxwE7AOfZ/mWthQ2ossX0Uia1y2yfUHNpA0fSK6muNzwL+BTwFOD9tpfVWtiAGrYtp/T0O2T7twCSngJ8teZyhsHDtn8paStJW9m+WtIn6i5qENn+Wpm8H3hJnbUMicdtOVFdKH1gt5wS+h2S9HdUm3oPAo9Q9jYBnlFnXQNscrtsLWmXtUXS6RuaP6i7GG4B/lXSDsA7eWzL6e31ltS5tHc6VPrPLyiHvEeX0i7rnqSHgJuBC6nWRh93sphh3Rsl2pM1/c79X6qr50QPpF3WE7sCRwOvAdZR7bb5Rdu/qrWqATWsW05Z0+9Q2SPibOA64NFL+g3qG6Fu62uX2U67rAOSZgLHAO8ATrb9uZpLGjjDuuWUNf3OfQa4CriJKqSiO+8C9km7rHuS9geOBV5OtdvrynorGlhDueWUNf0OSfr+xKXoonuSvg781TBcjq4ukj5AdRTubcAFwNdtr6u3quEwTFtOCf0OSfpvVAdpfJXHt3furaumQZZ2WfckPUJ1cNvEB+fEP/dEqyzXb+7ApC2nlcDHbN9ab1WdS+h3SNJdUwynB90hSd8DvsOkdtmg9k3rIOnpG5pv+8f9qmUYDOuWU0I/tghpl3VPkryRf+hNWSYqw7rllC9yOyRpe6r+3u62F0qaC+zVcjRktOdSSQtJu6wbV0v6EnBR64nqJG0LvJDqbJtXA+fUU97AmVN3AZtD1vQ7JOkLVP29423vUz4E/o/t59Rc2kBKu6x7kp5AdZnJ46gC61dUZ4XcmuoSf5+2/f36Khwsw7rllNDvUMuplR9tS+TUyrGlKBfwng78btB3MayLpG8CG91ysn1OLQV2KO2dzj0k6U8ofT5Je9DSloj2pF3WW7YfBtbUXceAm0e15XS+pKm2nD4xiFtOWdPvULmI93upLqxwOXAQ8Drb36yzrkGVdllsyYZpyymh3yZJ0yZ225L0VKpLJgq4NkeTdi7tsoj+SHunfd8D9i/T/2L7LXUWM0TSLovog4R++1pPunRQbVUMn1OArwOzJJ1HaZfVWlHEEEroty/9sB6aaJfZvkLS9TzWLntb2mURvZeefpskPQCMUQXTHmUaBvwovbpIut72/mX6U2mXRWxeWdNv33+uu4Ahk3ZZRB8l9Nv3k2E8Sq9GeZ0i+ijtnTYN61F6dUm7LKK/EvptyvlNeiunA47or4R+F4bpKL26DOtJrSK2VFvVXcAgs/2w7TUJ/K5cLektknZvHZS0raSXSlpK1TKLiB7Imn7UKu2yiP5K6McWI+2yiM0voR8R0SDp6UdENEhCPyKiQRL6EX0k6f/VXUM0W0I/YgBIyilToicS+jE0JD1R0sWSbpB0s6TXSHqupG9JWinpMkm7StpB0u2S9ir3O1/S307xeKdKulXSjZI+WsbOkXSmpGsl3SnpYElLJN0m6ZyW+x4r6aZSx4eneOzpkr4r6QhJI5K+JGl5+TmoLPMvkj4n6X8Dn9tcr1s0S9YeYpjMA35q+wgASTsAlwLzbY9Leg3wIdtvkHQScI6kTwI72f5s6wOVS2H+JfBM25a0Y8vsnYAXAEcCy6jODvpGYLmk5wBrgQ8DzwXuAy6XdJTtr5TH3qXc773lOgL/EzjN9nfKQWqX8djZXPcGXmj7dz19paKxEvoxTG4CPlbWrL9GFbj7AFdIguqArzUAJWyPBs4AproO7/3Ag8BZkr5WHm/CV8sHwU3Az23fBCDpFmA28HTgm7bHy/h5wIuArwDbAFcCJ9r+Vnm8lwF7lxoBniLpSWV6WQI/eimhH0PD9o8k7Q+8AvhX4CrgFtsvmLyspK2o1qYfoFpzXzXpsdZJOgA4BHgVcBLw0jJ74tq9j/D46/g+QvU/9fAGylwHrAQOAyZCfyvgQNsPTqoR4LcbeKyItqWnH0ND0m7AA7Y/D3wEeD4wIukFZf42kp5VFn87cBvw18DZ5WhgJJ0r6YCypr2D7UvKslNtDazP94AXl7791sCxPBbwpjrtxDMlnVzGLgcevWJYaRFFbBZZ049h8mfARyQ9QrW2/fdUa9anl/7+NOATktZR9eAPsP0bSdcA76W6OPuzgZ8CTwYuKucGEvCOTS3C9hpJi4Cry30vtn1Ry/w/SDoWWCbpN8BbgTMk3VhqvAZ4UzcvRMT65DQMEYWkpwBn2T667loiNpeEfkREg6SnHxHRIAn9iIgGSehHRDRIQj8iokES+hERDZLQj4hokP8PSVH4hGp5yiwAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VfRYuS0oBtsj",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 486
        },
        "outputId": "5c5f10ff-6389-4042-ed6f-0f773d94dbd3"
      },
      "source": [
        " # Scatter plot of total_bil vs Tip\n",
        " plt.scatter(df1['total_bill'],df1['tip'],c='g')\n",
        " print(df1.groupby('total_bill')['tip'].value_counts())"
      ],
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "total_bill  tip  \n",
            "3.07        1.00     1\n",
            "5.75        1.00     1\n",
            "7.25        1.00     1\n",
            "            5.15     1\n",
            "7.51        2.00     1\n",
            "                    ..\n",
            "45.35       3.50     1\n",
            "48.17       5.00     1\n",
            "48.27       6.73     1\n",
            "48.33       9.00     1\n",
            "50.81       10.00    1\n",
            "Name: tip, Length: 242, dtype: int64\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yt1Zo2CaCjPG",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 486
        },
        "outputId": "4a6b8390-a7bf-499d-87d3-34bacfad0647"
      },
      "source": [
        "# scattter plot of total bill vs Pct_tip\n",
        "plt.scatter(df1['total_bill'],df1['pct_tip'],c='b')\n",
        "print(df1.groupby('total_bill')['pct_tip'].value_counts())"
      ],
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "total_bill  pct_tip  \n",
            "3.07        32.573290    1\n",
            "5.75        17.391304    1\n",
            "7.25        13.793103    1\n",
            "            71.034483    1\n",
            "7.51        26.631158    1\n",
            "                        ..\n",
            "45.35       7.717751     1\n",
            "48.17       10.379905    1\n",
            "48.27       13.942407    1\n",
            "48.33       18.621974    1\n",
            "50.81       19.681165    1\n",
            "Name: pct_tip, Length: 242, dtype: int64\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GRixiZnVDt_c",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 43,
      "outputs": []
    }
  ]
}